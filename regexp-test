#!/usr/bin/perl

use strict;
use warnings;

use Test::More tests => 18;

use lib './';
use Regexp::Object;
use Regexp::Object::Test::Literal;

my $foo = Regexp::Object::Test::Literal->new('foo');
my $bar = Regexp::Object::Test::Literal->new('bar');

is_deeply(
	seq($foo, $bar)->match(qw/foo bar/),
	{},
	'"foo bar" =~ /foo bar/'
);

is_deeply(
	capture('x', $foo, $bar)->match(qw/foo bar/),
	{ x => [qw/foo bar/] },
	'"foo bar" =~ /[x: foo bar]/'
);

is_deeply(
	star(capture_all('x', $foo, $bar))->match('foo', 'bar', 'foo', 'bar'),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]*/'
);

is_deeply(
	star(capture_all('x', $foo, $bar))->match(),
	{},
	'"" =~ /[x:: foo bar]*/'
);

is_deeply(
	plus(capture_all('x', $foo, $bar))->match(),
	[ $foo ],
	'"" =~ /[x:: foo bar]+/'
);

is_deeply(
	plus(capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]+/'
);

is_deeply(
	plus(capture_all('x', $foo, $bar))->match(qw/foo bar/),
	{ x => [[qw/foo bar/]] },
	'"foo bar" =~ /[x:: foo bar]+/'
);

is_deeply(
	seq(capture('x', $foo, $bar), star(capture_all('y', $foo, $bar)))->
		match(qw/foo bar foo bar/),
	{ x => [qw/foo bar/], y => [[qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x: foo bar] [y:: foo bar]*/'
);

is_deeply(
	count(0, 1, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	[],
	'"foo bar foo bar" =~ /[x:: foo bar]{0,1}/'
);

is_deeply(
	count(2, 2, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{2,2}/'
);

is_deeply(
	count(1, 2, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{1,2}/'
);

is_deeply(
	count(3, 4, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	[ $foo ],
	'"foo bar foo bar" =~ /[x:: foo bar]{3,4}/'
);

is_deeply(
	count(1, 4, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{1,4}/'
);

is_deeply(
	count(1, NO_BOUND, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{1,}/'
);

is_deeply(
	count(3, NO_BOUND, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	[ $foo ],
	'"foo bar foo bar" =~ /[x:: foo bar]{3,}/'
);

is_deeply(
	count(0, NO_BOUND, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{0,}/'
);

is_deeply(
	count(NO_BOUND, NO_BOUND, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{,}/'
);

is_deeply(
	count(NO_BOUND, 4, capture_all('x', $foo, $bar))->match(qw/foo bar foo bar/),
	{ x => [[qw/foo bar/], [qw/foo bar/]] },
	'"foo bar foo bar" =~ /[x:: foo bar]{,4}/'
);

1;

